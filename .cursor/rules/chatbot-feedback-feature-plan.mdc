---
alwaysApply: true
---
Implementation Plan: Chatbot Feedback Workflow
This guide breaks down the process of building the feedback system for the character AI chats into five distinct, manageable phases. Each phase builds upon the previous one.

Phase 1: The Backend Foundation
Goal: Prepare the system to store feedback before building any user-facing features.

Steps:

Define the Feedback Data Model:

Think about all the different kinds of feedback you'll receive (ratings, text comments, choices).

In your database schema (prisma.schema.prisma), design a single, flexible Feedback table that can store all of this information. It should include fields for the user ID, the type of feedback, a rating, a text comment, etc.

Create the Feedback API Endpoint:

Build a single API route (e.g., /api/feedback) that will receive all feedback submissions from the frontend.

This endpoint's only job is to receive data, validate it, and save it to the Feedback table in your database.

Phase 2: In-Chat Micro-Feedback (The Thumbs Up/Down)
Goal: Allow users to give instant feedback on individual AI messages.

Steps:

Create the UI Component:

Build a small, reusable component that displays a "üëç" and "üëé" icon or button.

Integrate into the Chat UI:

In your chat interface, place this new component directly below every message bubble generated by the AI character.

Connect to the Backend:

When a user clicks either the thumbs up or thumbs down button, the component should make an API call to the feedback endpoint created in Phase 1.

It needs to send the user's ID, the type of feedback (e.g., "message_rating"), and a value representing the choice (e.g., +1 for up, -1 for down).

Phase 3: The End-of-Session Survey
Goal: Ask for a summary rating after a conversation appears to have ended.

Steps:

Implement an Inactivity Timer:

In the main chat page component, start a timer (e.g., for 10 minutes) when the page loads or after the AI sends a message.

Crucially, this timer must be reset back to zero every single time the user sends a message.

Create the Survey UI:

Design a simple, non-intrusive UI element, like a small banner at the bottom of the chat or a subtle modal.

This UI should contain a 1-5 star rating system and a "Submit" button.

Trigger the Survey:

If the inactivity timer successfully completes its 10-minute countdown without being reset, it signifies the user is likely done with the conversation.

When the timer finishes, trigger the survey UI to appear.

Connect to the Backend:

When the user selects a star rating and clicks "Submit," send this data to your feedback API.

Phase 4: Contextual Follow-Up Questions
Goal: Ask for optional, open-ended text feedback based on the user's star rating.

Steps:

Enhance the Survey UI:

Modify the End-of-Session survey component from Phase 3.

Add a text input box to this component, but keep it hidden by default.

Implement Conditional Logic:

After the user submits their star rating, do not immediately close the survey.

Instead, check the rating they gave.

If the rating is high (4 or 5 stars), reveal the text box with the question: "What did you like most? (Optional)".

If the rating is low (1 or 2 stars), reveal the text box with the question: "What was confusing or unclear? (Optional)".

The "Submit" button should now send both the star rating and the optional text comment.

Phase 5: The Weekly Progress Check-in
Goal: Proactively ask the user about their long-term progress.

Steps:

Use Browser Storage:

Decide on a mechanism to track when the user was last shown the check-in. The browser's localStorage is perfect for this.

Implement the Time-Check Logic:

Every time the application loads, have it check localStorage for a lastCheckInDate.

Compare that stored date with the current date.

Trigger the Check-in Modal:

If no date is stored, or if more than seven days have passed since the stored date, trigger a full-screen modal to appear.

This modal will contain the weekly progress question (e.g., "Over the last week, how would you rate your control...?") with its multiple-choice answers.

Update the Stored Date:

After the user submits their answer, the modal should close, and you must immediately update the lastCheckInDate in localStorage to the current date. This prevents the modal from appearing again until another week has passed.

Send the user's answer to your feedback API.